// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v5.29.3
// source: event.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";
import { Empty } from "./google/protobuf/empty";

export const protobufPackage = "event";

export enum UserRole {
  USER_UNSPECIFIED = 0,
  USER = 1,
  OPERATOR = 2,
  AUDITOR = 3,
  ADMIN = 4,
  UNRECOGNIZED = -1,
}

export enum EventStatus {
  EVENT_STATUS_UNSPECIFIED = 0,
  ACTIVE = 1,
  INACTIVE = 2,
  UNRECOGNIZED = -1,
}

export enum RewardType {
  REWARD_TYPE_UNSPECIFIED = 0,
  POINT = 1,
  ITEM = 2,
  COUPON = 3,
  UNRECOGNIZED = -1,
}

export enum RewardStatus {
  REWARD_STATUS_UNSPECIFIED = 0,
  PENDING = 1,
  SUCCESS = 2,
  FAILED = 3,
  UNRECOGNIZED = -1,
}

export interface CreateEventRequest {
  title: string;
  description: string;
  condition: string;
  startDate: string;
  endDate: string;
  status: EventStatus;
}

export interface GetEventRequest {
  eventId: string;
}

export interface Event {
  id: string;
  title: string;
  description: string;
  condition: string;
  startDate: string;
  endDate: string;
  status: EventStatus;
}

export interface Events {
  events: Event[];
}

export interface CreateRewardRequest {
  eventId: string;
  type: RewardType;
  quantity: number;
  description: string;
}

export interface GetRewardsRequest {
  eventId: string;
}

export interface Reward {
  id: string;
  eventId: string;
  type: RewardType;
  quantity: number;
  description: string;
}

export interface Rewards {
  rewards: Reward[];
}

export interface RewardRequest {
  eventId: string;
}

export interface GetRewardHistoriesRequest {
  userId?: string | undefined;
  eventId?: string | undefined;
}

export interface RewardHistory {
  eventId: string;
  rewardId: string;
  status: RewardStatus;
  requestedAt: string;
}

export interface RewardHistories {
  rewardHistories: RewardHistory[];
}

export const EVENT_PACKAGE_NAME = "event";

export interface EventServiceClient {
  createEvent(request: CreateEventRequest): Observable<Event>;

  getEvent(request: GetEventRequest): Observable<Event>;

  getEvents(request: Empty): Observable<Events>;

  createReward(request: CreateRewardRequest): Observable<Reward>;

  getRewards(request: GetRewardsRequest): Observable<Rewards>;

  requestReward(request: RewardRequest): Observable<RewardHistory>;

  getRewardHistories(request: GetRewardHistoriesRequest): Observable<RewardHistories>;
}

export interface EventServiceController {
  createEvent(request: CreateEventRequest): Promise<Event> | Observable<Event> | Event;

  getEvent(request: GetEventRequest): Promise<Event> | Observable<Event> | Event;

  getEvents(request: Empty): Promise<Events> | Observable<Events> | Events;

  createReward(request: CreateRewardRequest): Promise<Reward> | Observable<Reward> | Reward;

  getRewards(request: GetRewardsRequest): Promise<Rewards> | Observable<Rewards> | Rewards;

  requestReward(request: RewardRequest): Promise<RewardHistory> | Observable<RewardHistory> | RewardHistory;

  getRewardHistories(
    request: GetRewardHistoriesRequest,
  ): Promise<RewardHistories> | Observable<RewardHistories> | RewardHistories;
}

export function EventServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      "createEvent",
      "getEvent",
      "getEvents",
      "createReward",
      "getRewards",
      "requestReward",
      "getRewardHistories",
    ];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("EventService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("EventService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const EVENT_SERVICE_NAME = "EventService";
