// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v5.29.3
// source: auth.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";
import { Empty } from "./google/protobuf/empty";

export const protobufPackage = "auth";

export enum UserRole {
  USER_UNSPECIFIED = 0,
  USER = 1,
  OPERATOR = 2,
  AUDITOR = 3,
  ADMIN = 4,
  UNRECOGNIZED = -1,
}

export interface RefreshTokenRequest {
  refreshToken: string;
}

export interface LoginRequest {
  email: string;
  password: string;
}

export interface AuthToken {
  accessToken: string;
  refreshToken: string;
}

export interface CreateUserRequest {
  email: string;
  password: string;
  role: UserRole;
}

export interface UpdateUserRequest {
  id: string;
  email: string;
  password: string;
  role: UserRole;
}

export interface DeleteUserRequest {
  id: string;
}

export interface User {
  id: string;
  email: string;
  role: UserRole;
}

export const AUTH_PACKAGE_NAME = "auth";

export interface AuthServiceClient {
  refreshToken(request: RefreshTokenRequest): Observable<AuthToken>;

  login(request: LoginRequest): Observable<AuthToken>;

  getUser(request: Empty): Observable<User>;

  createUser(request: CreateUserRequest): Observable<User>;

  updateUser(request: UpdateUserRequest): Observable<User>;

  deleteUser(request: DeleteUserRequest): Observable<Empty>;
}

export interface AuthServiceController {
  refreshToken(request: RefreshTokenRequest): Promise<AuthToken> | Observable<AuthToken> | AuthToken;

  login(request: LoginRequest): Promise<AuthToken> | Observable<AuthToken> | AuthToken;

  getUser(request: Empty): Promise<User> | Observable<User> | User;

  createUser(request: CreateUserRequest): Promise<User> | Observable<User> | User;

  updateUser(request: UpdateUserRequest): Promise<User> | Observable<User> | User;

  deleteUser(request: DeleteUserRequest): void;
}

export function AuthServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["refreshToken", "login", "getUser", "createUser", "updateUser", "deleteUser"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("AuthService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("AuthService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const AUTH_SERVICE_NAME = "AuthService";
